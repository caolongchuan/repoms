package cn.reebtech.repoms.model.greendao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import cn.reebtech.repoms.model.entity.Order_In_Detail;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "ORDER__IN__DETAIL".
*/
public class Order_In_DetailDao extends AbstractDao<Order_In_Detail, Long> {

    public static final String TABLENAME = "ORDER__IN__DETAIL";

    /**
     * Properties of entity Order_In_Detail.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property Order = new Property(1, String.class, "order", false, "ORDER");
        public final static Property Asset = new Property(2, String.class, "asset", false, "ASSET");
        public final static Property Name = new Property(3, String.class, "name", false, "NAME");
        public final static Property Clsct = new Property(4, String.class, "clsct", false, "CLSCT");
        public final static Property Specification = new Property(5, String.class, "specification", false, "SPECIFICATION");
        public final static Property Manut = new Property(6, String.class, "manut", false, "MANUT");
        public final static Property Price = new Property(7, double.class, "price", false, "PRICE");
        public final static Property Location = new Property(8, String.class, "location", false, "LOCATION");
        public final static Property Rfid = new Property(9, String.class, "rfid", false, "RFID");
        public final static Property Completed = new Property(10, boolean.class, "completed", false, "COMPLETED");
        public final static Property Uploaded = new Property(11, boolean.class, "uploaded", false, "UPLOADED");
        public final static Property Count = new Property(12, int.class, "count", false, "COUNT");
        public final static Property Remark = new Property(13, String.class, "remark", false, "REMARK");
        public final static Property Asset_code = new Property(14, String.class, "asset_code", false, "ASSET_CODE");
    }


    public Order_In_DetailDao(DaoConfig config) {
        super(config);
    }
    
    public Order_In_DetailDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"ORDER__IN__DETAIL\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "\"ORDER\" TEXT NOT NULL ," + // 1: order
                "\"ASSET\" TEXT NOT NULL ," + // 2: asset
                "\"NAME\" TEXT NOT NULL ," + // 3: name
                "\"CLSCT\" TEXT NOT NULL ," + // 4: clsct
                "\"SPECIFICATION\" TEXT," + // 5: specification
                "\"MANUT\" TEXT," + // 6: manut
                "\"PRICE\" REAL NOT NULL ," + // 7: price
                "\"LOCATION\" TEXT," + // 8: location
                "\"RFID\" TEXT," + // 9: rfid
                "\"COMPLETED\" INTEGER NOT NULL ," + // 10: completed
                "\"UPLOADED\" INTEGER NOT NULL ," + // 11: uploaded
                "\"COUNT\" INTEGER NOT NULL ," + // 12: count
                "\"REMARK\" TEXT," + // 13: remark
                "\"ASSET_CODE\" TEXT);"); // 14: asset_code
        // Add Indexes
        db.execSQL("CREATE UNIQUE INDEX " + constraint + "IDX_ORDER__IN__DETAIL__id_DESC ON \"ORDER__IN__DETAIL\"" +
                " (\"_id\" DESC);");
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"ORDER__IN__DETAIL\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, Order_In_Detail entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
        stmt.bindString(2, entity.getOrder());
        stmt.bindString(3, entity.getAsset());
        stmt.bindString(4, entity.getName());
        stmt.bindString(5, entity.getClsct());
 
        String specification = entity.getSpecification();
        if (specification != null) {
            stmt.bindString(6, specification);
        }
 
        String manut = entity.getManut();
        if (manut != null) {
            stmt.bindString(7, manut);
        }
        stmt.bindDouble(8, entity.getPrice());
 
        String location = entity.getLocation();
        if (location != null) {
            stmt.bindString(9, location);
        }
 
        String rfid = entity.getRfid();
        if (rfid != null) {
            stmt.bindString(10, rfid);
        }
        stmt.bindLong(11, entity.getCompleted() ? 1L: 0L);
        stmt.bindLong(12, entity.getUploaded() ? 1L: 0L);
        stmt.bindLong(13, entity.getCount());
 
        String remark = entity.getRemark();
        if (remark != null) {
            stmt.bindString(14, remark);
        }
 
        String asset_code = entity.getAsset_code();
        if (asset_code != null) {
            stmt.bindString(15, asset_code);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, Order_In_Detail entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
        stmt.bindString(2, entity.getOrder());
        stmt.bindString(3, entity.getAsset());
        stmt.bindString(4, entity.getName());
        stmt.bindString(5, entity.getClsct());
 
        String specification = entity.getSpecification();
        if (specification != null) {
            stmt.bindString(6, specification);
        }
 
        String manut = entity.getManut();
        if (manut != null) {
            stmt.bindString(7, manut);
        }
        stmt.bindDouble(8, entity.getPrice());
 
        String location = entity.getLocation();
        if (location != null) {
            stmt.bindString(9, location);
        }
 
        String rfid = entity.getRfid();
        if (rfid != null) {
            stmt.bindString(10, rfid);
        }
        stmt.bindLong(11, entity.getCompleted() ? 1L: 0L);
        stmt.bindLong(12, entity.getUploaded() ? 1L: 0L);
        stmt.bindLong(13, entity.getCount());
 
        String remark = entity.getRemark();
        if (remark != null) {
            stmt.bindString(14, remark);
        }
 
        String asset_code = entity.getAsset_code();
        if (asset_code != null) {
            stmt.bindString(15, asset_code);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public Order_In_Detail readEntity(Cursor cursor, int offset) {
        Order_In_Detail entity = new Order_In_Detail( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.getString(offset + 1), // order
            cursor.getString(offset + 2), // asset
            cursor.getString(offset + 3), // name
            cursor.getString(offset + 4), // clsct
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // specification
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // manut
            cursor.getDouble(offset + 7), // price
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8), // location
            cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9), // rfid
            cursor.getShort(offset + 10) != 0, // completed
            cursor.getShort(offset + 11) != 0, // uploaded
            cursor.getInt(offset + 12), // count
            cursor.isNull(offset + 13) ? null : cursor.getString(offset + 13), // remark
            cursor.isNull(offset + 14) ? null : cursor.getString(offset + 14) // asset_code
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, Order_In_Detail entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setOrder(cursor.getString(offset + 1));
        entity.setAsset(cursor.getString(offset + 2));
        entity.setName(cursor.getString(offset + 3));
        entity.setClsct(cursor.getString(offset + 4));
        entity.setSpecification(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setManut(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setPrice(cursor.getDouble(offset + 7));
        entity.setLocation(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
        entity.setRfid(cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9));
        entity.setCompleted(cursor.getShort(offset + 10) != 0);
        entity.setUploaded(cursor.getShort(offset + 11) != 0);
        entity.setCount(cursor.getInt(offset + 12));
        entity.setRemark(cursor.isNull(offset + 13) ? null : cursor.getString(offset + 13));
        entity.setAsset_code(cursor.isNull(offset + 14) ? null : cursor.getString(offset + 14));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(Order_In_Detail entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(Order_In_Detail entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(Order_In_Detail entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
