package cn.reebtech.repoms.model.greendao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import cn.reebtech.repoms.model.entity.Order_Invt;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "ORDER__INVT".
*/
public class Order_InvtDao extends AbstractDao<Order_Invt, Long> {

    public static final String TABLENAME = "ORDER__INVT";

    /**
     * Properties of entity Order_Invt.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Pid = new Property(0, Long.class, "pid", true, "_id");
        public final static Property Id = new Property(1, String.class, "id", false, "ID");
        public final static Property Location = new Property(2, String.class, "location", false, "LOCATION");
        public final static Property Invdate = new Property(3, java.util.Date.class, "invdate", false, "INVDATE");
        public final static Property Invuser = new Property(4, String.class, "invuser", false, "INVUSER");
        public final static Property Invcount = new Property(5, int.class, "invcount", false, "INVCOUNT");
        public final static Property Completed = new Property(6, boolean.class, "completed", false, "COMPLETED");
        public final static Property Uploaded = new Property(7, boolean.class, "uploaded", false, "UPLOADED");
        public final static Property Remark = new Property(8, String.class, "remark", false, "REMARK");
    }


    public Order_InvtDao(DaoConfig config) {
        super(config);
    }
    
    public Order_InvtDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"ORDER__INVT\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: pid
                "\"ID\" TEXT NOT NULL ," + // 1: id
                "\"LOCATION\" TEXT NOT NULL ," + // 2: location
                "\"INVDATE\" INTEGER NOT NULL ," + // 3: invdate
                "\"INVUSER\" TEXT NOT NULL ," + // 4: invuser
                "\"INVCOUNT\" INTEGER NOT NULL ," + // 5: invcount
                "\"COMPLETED\" INTEGER NOT NULL ," + // 6: completed
                "\"UPLOADED\" INTEGER NOT NULL ," + // 7: uploaded
                "\"REMARK\" TEXT);"); // 8: remark
        // Add Indexes
        db.execSQL("CREATE UNIQUE INDEX " + constraint + "IDX_ORDER__INVT_ID ON \"ORDER__INVT\"" +
                " (\"ID\" ASC);");
        db.execSQL("CREATE UNIQUE INDEX " + constraint + "IDX_ORDER__INVT_ID_DESC ON \"ORDER__INVT\"" +
                " (\"ID\" DESC);");
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"ORDER__INVT\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, Order_Invt entity) {
        stmt.clearBindings();
 
        Long pid = entity.getPid();
        if (pid != null) {
            stmt.bindLong(1, pid);
        }
        stmt.bindString(2, entity.getId());
        stmt.bindString(3, entity.getLocation());
        stmt.bindLong(4, entity.getInvdate().getTime());
        stmt.bindString(5, entity.getInvuser());
        stmt.bindLong(6, entity.getInvcount());
        stmt.bindLong(7, entity.getCompleted() ? 1L: 0L);
        stmt.bindLong(8, entity.getUploaded() ? 1L: 0L);
 
        String remark = entity.getRemark();
        if (remark != null) {
            stmt.bindString(9, remark);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, Order_Invt entity) {
        stmt.clearBindings();
 
        Long pid = entity.getPid();
        if (pid != null) {
            stmt.bindLong(1, pid);
        }
        stmt.bindString(2, entity.getId());
        stmt.bindString(3, entity.getLocation());
        stmt.bindLong(4, entity.getInvdate().getTime());
        stmt.bindString(5, entity.getInvuser());
        stmt.bindLong(6, entity.getInvcount());
        stmt.bindLong(7, entity.getCompleted() ? 1L: 0L);
        stmt.bindLong(8, entity.getUploaded() ? 1L: 0L);
 
        String remark = entity.getRemark();
        if (remark != null) {
            stmt.bindString(9, remark);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public Order_Invt readEntity(Cursor cursor, int offset) {
        Order_Invt entity = new Order_Invt( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // pid
            cursor.getString(offset + 1), // id
            cursor.getString(offset + 2), // location
            new java.util.Date(cursor.getLong(offset + 3)), // invdate
            cursor.getString(offset + 4), // invuser
            cursor.getInt(offset + 5), // invcount
            cursor.getShort(offset + 6) != 0, // completed
            cursor.getShort(offset + 7) != 0, // uploaded
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8) // remark
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, Order_Invt entity, int offset) {
        entity.setPid(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setId(cursor.getString(offset + 1));
        entity.setLocation(cursor.getString(offset + 2));
        entity.setInvdate(new java.util.Date(cursor.getLong(offset + 3)));
        entity.setInvuser(cursor.getString(offset + 4));
        entity.setInvcount(cursor.getInt(offset + 5));
        entity.setCompleted(cursor.getShort(offset + 6) != 0);
        entity.setUploaded(cursor.getShort(offset + 7) != 0);
        entity.setRemark(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(Order_Invt entity, long rowId) {
        entity.setPid(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(Order_Invt entity) {
        if(entity != null) {
            return entity.getPid();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(Order_Invt entity) {
        return entity.getPid() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
