package cn.reebtech.repoms.model.greendao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import cn.reebtech.repoms.model.entity.AssetClsct;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "ASSET_CLSCT".
*/
public class AssetClsctDao extends AbstractDao<AssetClsct, Long> {

    public static final String TABLENAME = "ASSET_CLSCT";

    /**
     * Properties of entity AssetClsct.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Pid = new Property(0, Long.class, "pid", true, "_id");
        public final static Property Id = new Property(1, String.class, "id", false, "ID");
        public final static Property Name = new Property(2, String.class, "name", false, "NAME");
        public final static Property Parent = new Property(3, String.class, "parent", false, "PARENT");
        public final static Property Layer = new Property(4, int.class, "layer", false, "LAYER");
        public final static Property Location = new Property(5, String.class, "location", false, "LOCATION");
        public final static Property Minstock = new Property(6, int.class, "minstock", false, "MINSTOCK");
        public final static Property Maxstock = new Property(7, int.class, "maxstock", false, "MAXSTOCK");
    }


    public AssetClsctDao(DaoConfig config) {
        super(config);
    }
    
    public AssetClsctDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"ASSET_CLSCT\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: pid
                "\"ID\" TEXT NOT NULL ," + // 1: id
                "\"NAME\" TEXT NOT NULL ," + // 2: name
                "\"PARENT\" TEXT," + // 3: parent
                "\"LAYER\" INTEGER NOT NULL ," + // 4: layer
                "\"LOCATION\" TEXT," + // 5: location
                "\"MINSTOCK\" INTEGER NOT NULL ," + // 6: minstock
                "\"MAXSTOCK\" INTEGER NOT NULL );"); // 7: maxstock
        // Add Indexes
        db.execSQL("CREATE UNIQUE INDEX " + constraint + "IDX_ASSET_CLSCT_ID ON \"ASSET_CLSCT\"" +
                " (\"ID\" ASC);");
        db.execSQL("CREATE UNIQUE INDEX " + constraint + "IDX_ASSET_CLSCT_ID_DESC ON \"ASSET_CLSCT\"" +
                " (\"ID\" DESC);");
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"ASSET_CLSCT\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, AssetClsct entity) {
        stmt.clearBindings();
 
        Long pid = entity.getPid();
        if (pid != null) {
            stmt.bindLong(1, pid);
        }
        stmt.bindString(2, entity.getId());
        stmt.bindString(3, entity.getName());
 
        String parent = entity.getParent();
        if (parent != null) {
            stmt.bindString(4, parent);
        }
        stmt.bindLong(5, entity.getLayer());
 
        String location = entity.getLocation();
        if (location != null) {
            stmt.bindString(6, location);
        }
        stmt.bindLong(7, entity.getMinstock());
        stmt.bindLong(8, entity.getMaxstock());
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, AssetClsct entity) {
        stmt.clearBindings();
 
        Long pid = entity.getPid();
        if (pid != null) {
            stmt.bindLong(1, pid);
        }
        stmt.bindString(2, entity.getId());
        stmt.bindString(3, entity.getName());
 
        String parent = entity.getParent();
        if (parent != null) {
            stmt.bindString(4, parent);
        }
        stmt.bindLong(5, entity.getLayer());
 
        String location = entity.getLocation();
        if (location != null) {
            stmt.bindString(6, location);
        }
        stmt.bindLong(7, entity.getMinstock());
        stmt.bindLong(8, entity.getMaxstock());
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public AssetClsct readEntity(Cursor cursor, int offset) {
        AssetClsct entity = new AssetClsct( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // pid
            cursor.getString(offset + 1), // id
            cursor.getString(offset + 2), // name
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // parent
            cursor.getInt(offset + 4), // layer
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // location
            cursor.getInt(offset + 6), // minstock
            cursor.getInt(offset + 7) // maxstock
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, AssetClsct entity, int offset) {
        entity.setPid(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setId(cursor.getString(offset + 1));
        entity.setName(cursor.getString(offset + 2));
        entity.setParent(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setLayer(cursor.getInt(offset + 4));
        entity.setLocation(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setMinstock(cursor.getInt(offset + 6));
        entity.setMaxstock(cursor.getInt(offset + 7));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(AssetClsct entity, long rowId) {
        entity.setPid(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(AssetClsct entity) {
        if(entity != null) {
            return entity.getPid();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(AssetClsct entity) {
        return entity.getPid() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
