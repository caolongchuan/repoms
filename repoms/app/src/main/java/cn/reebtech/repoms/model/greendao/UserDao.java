package cn.reebtech.repoms.model.greendao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import cn.reebtech.repoms.model.entity.User;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "USER".
*/
public class UserDao extends AbstractDao<User, Void> {

    public static final String TABLENAME = "USER";

    /**
     * Properties of entity User.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, String.class, "id", false, "ID");
        public final static Property Name = new Property(1, String.class, "name", false, "NAME");
        public final static Property Username = new Property(2, String.class, "username", false, "USERNAME");
        public final static Property Password = new Property(3, String.class, "password", false, "PASSWORD");
        public final static Property Warehouse = new Property(4, String.class, "warehouse", false, "WAREHOUSE");
        public final static Property Sex = new Property(5, String.class, "sex", false, "SEX");
        public final static Property Dept = new Property(6, String.class, "dept", false, "DEPT");
        public final static Property Pos = new Property(7, String.class, "pos", false, "POS");
        public final static Property Phone = new Property(8, String.class, "phone", false, "PHONE");
        public final static Property Remark = new Property(9, String.class, "remark", false, "REMARK");
    }


    public UserDao(DaoConfig config) {
        super(config);
    }
    
    public UserDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"USER\" (" + //
                "\"ID\" TEXT NOT NULL ," + // 0: id
                "\"NAME\" TEXT NOT NULL ," + // 1: name
                "\"USERNAME\" TEXT NOT NULL ," + // 2: username
                "\"PASSWORD\" TEXT NOT NULL ," + // 3: password
                "\"WAREHOUSE\" TEXT," + // 4: warehouse
                "\"SEX\" TEXT," + // 5: sex
                "\"DEPT\" TEXT," + // 6: dept
                "\"POS\" TEXT," + // 7: pos
                "\"PHONE\" TEXT," + // 8: phone
                "\"REMARK\" TEXT);"); // 9: remark
        // Add Indexes
        db.execSQL("CREATE UNIQUE INDEX " + constraint + "IDX_USER_ID_DESC ON \"USER\"" +
                " (\"ID\" DESC);");
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"USER\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, User entity) {
        stmt.clearBindings();
        stmt.bindString(1, entity.getId());
        stmt.bindString(2, entity.getName());
        stmt.bindString(3, entity.getUsername());
        stmt.bindString(4, entity.getPassword());
 
        String warehouse = entity.getWarehouse();
        if (warehouse != null) {
            stmt.bindString(5, warehouse);
        }
 
        String sex = entity.getSex();
        if (sex != null) {
            stmt.bindString(6, sex);
        }
 
        String dept = entity.getDept();
        if (dept != null) {
            stmt.bindString(7, dept);
        }
 
        String pos = entity.getPos();
        if (pos != null) {
            stmt.bindString(8, pos);
        }
 
        String phone = entity.getPhone();
        if (phone != null) {
            stmt.bindString(9, phone);
        }
 
        String remark = entity.getRemark();
        if (remark != null) {
            stmt.bindString(10, remark);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, User entity) {
        stmt.clearBindings();
        stmt.bindString(1, entity.getId());
        stmt.bindString(2, entity.getName());
        stmt.bindString(3, entity.getUsername());
        stmt.bindString(4, entity.getPassword());
 
        String warehouse = entity.getWarehouse();
        if (warehouse != null) {
            stmt.bindString(5, warehouse);
        }
 
        String sex = entity.getSex();
        if (sex != null) {
            stmt.bindString(6, sex);
        }
 
        String dept = entity.getDept();
        if (dept != null) {
            stmt.bindString(7, dept);
        }
 
        String pos = entity.getPos();
        if (pos != null) {
            stmt.bindString(8, pos);
        }
 
        String phone = entity.getPhone();
        if (phone != null) {
            stmt.bindString(9, phone);
        }
 
        String remark = entity.getRemark();
        if (remark != null) {
            stmt.bindString(10, remark);
        }
    }

    @Override
    public Void readKey(Cursor cursor, int offset) {
        return null;
    }    

    @Override
    public User readEntity(Cursor cursor, int offset) {
        User entity = new User( //
            cursor.getString(offset + 0), // id
            cursor.getString(offset + 1), // name
            cursor.getString(offset + 2), // username
            cursor.getString(offset + 3), // password
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // warehouse
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // sex
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // dept
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // pos
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8), // phone
            cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9) // remark
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, User entity, int offset) {
        entity.setId(cursor.getString(offset + 0));
        entity.setName(cursor.getString(offset + 1));
        entity.setUsername(cursor.getString(offset + 2));
        entity.setPassword(cursor.getString(offset + 3));
        entity.setWarehouse(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setSex(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setDept(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setPos(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setPhone(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
        entity.setRemark(cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9));
     }
    
    @Override
    protected final Void updateKeyAfterInsert(User entity, long rowId) {
        // Unsupported or missing PK type
        return null;
    }
    
    @Override
    public Void getKey(User entity) {
        return null;
    }

    @Override
    public boolean hasKey(User entity) {
        // TODO
        return false;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
