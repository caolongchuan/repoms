package cn.reebtech.repoms.model.greendao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import cn.reebtech.repoms.model.entity.Order_Ret_Detail;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "ORDER__RET__DETAIL".
*/
public class Order_Ret_DetailDao extends AbstractDao<Order_Ret_Detail, Long> {

    public static final String TABLENAME = "ORDER__RET__DETAIL";

    /**
     * Properties of entity Order_Ret_Detail.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property Order = new Property(1, String.class, "order", false, "ORDER");
        public final static Property Asset = new Property(2, String.class, "asset", false, "ASSET");
        public final static Property Count = new Property(3, int.class, "count", false, "COUNT");
        public final static Property Price = new Property(4, double.class, "price", false, "PRICE");
        public final static Property Completed = new Property(5, boolean.class, "completed", false, "COMPLETED");
        public final static Property Uploaded = new Property(6, boolean.class, "uploaded", false, "UPLOADED");
        public final static Property Remark = new Property(7, String.class, "remark", false, "REMARK");
    }


    public Order_Ret_DetailDao(DaoConfig config) {
        super(config);
    }
    
    public Order_Ret_DetailDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"ORDER__RET__DETAIL\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "\"ORDER\" TEXT NOT NULL ," + // 1: order
                "\"ASSET\" TEXT NOT NULL ," + // 2: asset
                "\"COUNT\" INTEGER NOT NULL ," + // 3: count
                "\"PRICE\" REAL NOT NULL ," + // 4: price
                "\"COMPLETED\" INTEGER NOT NULL ," + // 5: completed
                "\"UPLOADED\" INTEGER NOT NULL ," + // 6: uploaded
                "\"REMARK\" TEXT);"); // 7: remark
        // Add Indexes
        db.execSQL("CREATE UNIQUE INDEX " + constraint + "IDX_ORDER__RET__DETAIL__id_DESC ON \"ORDER__RET__DETAIL\"" +
                " (\"_id\" DESC);");
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"ORDER__RET__DETAIL\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, Order_Ret_Detail entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
        stmt.bindString(2, entity.getOrder());
        stmt.bindString(3, entity.getAsset());
        stmt.bindLong(4, entity.getCount());
        stmt.bindDouble(5, entity.getPrice());
        stmt.bindLong(6, entity.getCompleted() ? 1L: 0L);
        stmt.bindLong(7, entity.getUploaded() ? 1L: 0L);
 
        String remark = entity.getRemark();
        if (remark != null) {
            stmt.bindString(8, remark);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, Order_Ret_Detail entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
        stmt.bindString(2, entity.getOrder());
        stmt.bindString(3, entity.getAsset());
        stmt.bindLong(4, entity.getCount());
        stmt.bindDouble(5, entity.getPrice());
        stmt.bindLong(6, entity.getCompleted() ? 1L: 0L);
        stmt.bindLong(7, entity.getUploaded() ? 1L: 0L);
 
        String remark = entity.getRemark();
        if (remark != null) {
            stmt.bindString(8, remark);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public Order_Ret_Detail readEntity(Cursor cursor, int offset) {
        Order_Ret_Detail entity = new Order_Ret_Detail( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.getString(offset + 1), // order
            cursor.getString(offset + 2), // asset
            cursor.getInt(offset + 3), // count
            cursor.getDouble(offset + 4), // price
            cursor.getShort(offset + 5) != 0, // completed
            cursor.getShort(offset + 6) != 0, // uploaded
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7) // remark
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, Order_Ret_Detail entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setOrder(cursor.getString(offset + 1));
        entity.setAsset(cursor.getString(offset + 2));
        entity.setCount(cursor.getInt(offset + 3));
        entity.setPrice(cursor.getDouble(offset + 4));
        entity.setCompleted(cursor.getShort(offset + 5) != 0);
        entity.setUploaded(cursor.getShort(offset + 6) != 0);
        entity.setRemark(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(Order_Ret_Detail entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(Order_Ret_Detail entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(Order_Ret_Detail entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
