package cn.reebtech.repoms.model.greendao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import cn.reebtech.repoms.model.entity.WareHouse;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "WARE_HOUSE".
*/
public class WareHouseDao extends AbstractDao<WareHouse, Void> {

    public static final String TABLENAME = "WARE_HOUSE";

    /**
     * Properties of entity WareHouse.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, String.class, "id", false, "ID");
        public final static Property Name = new Property(1, String.class, "name", false, "NAME");
        public final static Property Parent = new Property(2, String.class, "parent", false, "PARENT");
        public final static Property Layer = new Property(3, int.class, "layer", false, "LAYER");
        public final static Property Remark = new Property(4, String.class, "remark", false, "REMARK");
    }


    public WareHouseDao(DaoConfig config) {
        super(config);
    }
    
    public WareHouseDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"WARE_HOUSE\" (" + //
                "\"ID\" TEXT NOT NULL ," + // 0: id
                "\"NAME\" TEXT NOT NULL ," + // 1: name
                "\"PARENT\" TEXT," + // 2: parent
                "\"LAYER\" INTEGER NOT NULL ," + // 3: layer
                "\"REMARK\" TEXT);"); // 4: remark
        // Add Indexes
        db.execSQL("CREATE UNIQUE INDEX " + constraint + "IDX_WARE_HOUSE_ID_DESC ON \"WARE_HOUSE\"" +
                " (\"ID\" DESC);");
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"WARE_HOUSE\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, WareHouse entity) {
        stmt.clearBindings();
        stmt.bindString(1, entity.getId());
        stmt.bindString(2, entity.getName());
 
        String parent = entity.getParent();
        if (parent != null) {
            stmt.bindString(3, parent);
        }
        stmt.bindLong(4, entity.getLayer());
 
        String remark = entity.getRemark();
        if (remark != null) {
            stmt.bindString(5, remark);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, WareHouse entity) {
        stmt.clearBindings();
        stmt.bindString(1, entity.getId());
        stmt.bindString(2, entity.getName());
 
        String parent = entity.getParent();
        if (parent != null) {
            stmt.bindString(3, parent);
        }
        stmt.bindLong(4, entity.getLayer());
 
        String remark = entity.getRemark();
        if (remark != null) {
            stmt.bindString(5, remark);
        }
    }

    @Override
    public Void readKey(Cursor cursor, int offset) {
        return null;
    }    

    @Override
    public WareHouse readEntity(Cursor cursor, int offset) {
        WareHouse entity = new WareHouse( //
            cursor.getString(offset + 0), // id
            cursor.getString(offset + 1), // name
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // parent
            cursor.getInt(offset + 3), // layer
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4) // remark
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, WareHouse entity, int offset) {
        entity.setId(cursor.getString(offset + 0));
        entity.setName(cursor.getString(offset + 1));
        entity.setParent(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setLayer(cursor.getInt(offset + 3));
        entity.setRemark(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
     }
    
    @Override
    protected final Void updateKeyAfterInsert(WareHouse entity, long rowId) {
        // Unsupported or missing PK type
        return null;
    }
    
    @Override
    public Void getKey(WareHouse entity) {
        return null;
    }

    @Override
    public boolean hasKey(WareHouse entity) {
        // TODO
        return false;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
